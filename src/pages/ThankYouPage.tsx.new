import { useEffect, useState } from 'react'
import { useLocation, useNavigate } from 'react-router-dom'
import './ThankYouPage.css'
import EmbeddedSidebar from '../components/EmbeddedSidebar'
import SidebarToggleButton from '../components/SidebarToggleButton'
import { Tabs, TabsList, TabsTrigger, TabsContent } from '../components/Tabs'

interface ThankYouState {
  sessionId: string
  selectedOffers: string[]
  offerCount: number
  totalAmount: string
  wrapSessionSuccess?: boolean
  wrapSessionRequest?: {
    endpoint: string
    body: any
    curl: string
  }
  wrapSessionResponse?: any
}

interface WebhookFieldDescription {
  name: string;
  description: string;
}

// Helper function to generate webhook payload example
const getWebhookPayloadExample = (state: ThankYouState) => {
  return {
    body: {
      campaigns: state.selectedOffers.map((offerId, index) => ({
        campaign_id: offerId,
        advertiser_name: `Advertiser ${index + 1}`,
        title: `Offer ${index + 1}`,
        short_headline: `Special Offer ${index + 1}`,
        short_description: "Limited time offer for our customers",
        offer_description: "Take advantage of this exclusive deal available only to our customers",
        terms_and_conditions: "Some restrictions apply. See offer details for more information.",
        click_url: "https://example.com/offers/special-deal",
        cta_yes: "Claim Now",
        cta_no: "No Thanks",
        mini_text: "Limited time offer",
        image: "https://example.com/images/offer.jpg",
        pixel: "",
        adv_pixel_url: "",
        save_for_later_url: "https://example.com/offers/save-for-later",
        description: "Take advantage of this exclusive deal available only to our customers",
        is_loyaltyboost: false,
        loyaltyboost_requirements: {},
        offerwall_enabled: false,
        perkswallet_enabled: false,
        tags: ["discount", "special"],
        beacons: {
          close: "",
          no_thanks_click: ""
        },
        creatives: [
          {
            id: 1,
            url: "https://example.com/images/offer.jpg",
            type: "image",
            creative_type: "primary",
            aspect_ratio: 1.78,
            height: 600,
            width: 1067,
            user_id: 123,
            is_primary: true
          }
        ],
        campaign: {
          is_product: false,
          offer_description: "Take advantage of this exclusive deal available only to our customers",
          campaign_images: [
            {
              id: 1,
              url: "https://example.com/images/offer.jpg",
              type: "image",
              creative_type: "primary",
              aspect_ratio: 1.78,
              height: 600,
              width: 1067,
              user_id: 123,
              is_primary: true
            }
          ]
        },
        useraction_cta: null,
        useraction_url: null
      })),
      pub_user_id: "user_" + Math.floor(Math.random() * 1000000),
      selected: state.offerCount > 0 ? 1 : 0,
      session_id: state.sessionId
    }
  };
};

// Helper function to get webhook field descriptions
const getWebhookFieldDescriptions = (): WebhookFieldDescription[] => {
  return [
    { name: "body", description: "Container for the webhook payload data" },
    { name: "body.campaigns", description: "Array of offers selected by the user" },
    { name: "body.campaign_id", description: "The internal ID of the offer campaign" },
    { name: "body.advertiser_name", description: "The name of the advertiser associated with the offer" },
    { name: "body.title/short_headline/short_description", description: "Basic metadata for how the offer should be displayed or referenced" },
    { name: "body.offer_description", description: "Detailed explanation of the offer" },
    { name: "body.terms_and_conditions", description: "Terms of the selected offer" },
    { name: "body.click_url", description: "URL that leads to the offer landing page. May contain tracking parameters" },
    { name: "body.cta_yes/cta_no", description: "The CTA text (e.g., 'Claim Now') for positive/negative user actions" },
    { name: "body.image/creatives", description: "Images and media creatives associated with the offer" },
    { name: "body.mini_text", description: "Supplemental note for the user, often used for compliance or clarification" },
    { name: "body.pixel/adv_pixel_url", description: "Optional tracking pixels" },
    { name: "body.save_for_later_url", description: "Link that allows users to access the offer again later" },
    { name: "body.tags", description: "Optional categorization tags" },
    { name: "body.is_loyaltyboost", description: "Boolean indicating whether the offer is part of LoyaltyBoost" },
    { name: "body.beacons", description: "Optional tracking beacons for other user actions (e.g., close or 'no thanks')" },
    { name: "body.useraction_cta/useraction_url", description: "Optional action URL for the user to take immediate action outside the standard click_url" },
    { name: "body.campaign.campaign_images", description: "Alternate image assets for the campaign, structured similarly to creatives" },
    { name: "body.pub_user_id", description: "The unique identifier for the user, provided by the publisher. This must be a non-PII string" },
    { name: "body.selected", description: "Indicates whether the user selected any offers (1 for selected, 0 for none)" },
    { name: "body.session_id", description: "The unique session identifier generated by the Moments SDK" }
  ];
};

const ThankYouPage = () => {
  const location = useLocation();
  const navigate = useNavigate();
  const [state] = useState<ThankYouState | null>(location.state as ThankYouState);
  const [showSidebar, setShowSidebar] = useState(true);
  const [activeTab, setActiveTab] = useState('webhook');

  useEffect(() => {
    // If no state is passed, redirect to home
    if (!state) {
      navigate('/');
    }
  }, [state, navigate]);

  if (!state) {
    return null;
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-slate-200 font-sans text-gray-800 relative flex">
      <SidebarToggleButton 
        isOpen={showSidebar} 
        onToggle={() => setShowSidebar(!showSidebar)} 
        position="right"
      />
      
      {/* Main Content */}
      <div className="flex-1 flex flex-col min-w-0 h-screen overflow-y-auto transition-all duration-300"
        style={{ marginRight: showSidebar ? '480px' : '0px' }}>
        
        {/* Success Header */}
        <div className="bg-gradient-to-r from-emerald-500 to-emerald-700 text-white p-12 rounded-xl mx-auto my-8 max-w-3xl text-center shadow-lg relative overflow-hidden">
          <div className="mb-8 animate-fadeIn">
            <div className="inline-flex items-center justify-center w-24 h-24 bg-white bg-opacity-20 rounded-full backdrop-blur-sm border-3 border-white border-opacity-30">
              <div className="text-5xl font-bold animate-checkmark">✓</div>
            </div>
          </div>
          
          <h1 className="text-4xl font-extrabold mb-4 animate-fadeInUp">Payment Successful!</h1>
          <p className="text-xl opacity-95 mb-8 animate-fadeInUp">Thank you for your purchase. Your order has been confirmed.</p>
          
          <div className="inline-block bg-white bg-opacity-20 px-6 py-3 rounded-lg backdrop-blur-sm animate-fadeInUp">
            <span className="font-medium">Session ID:</span>
            <span className="ml-2 font-mono">#{state.sessionId}</span>
          </div>
        </div>

        <div className="max-w-3xl mx-auto px-6 pb-12 w-full">
          {/* Order Summary & Next Steps Grid */}
          <div className="grid md:grid-cols-2 gap-6 mb-8">
            {/* Order Summary */}
            <div className="bg-white rounded-xl shadow-md p-6">
              <h3 className="text-xl font-semibold mb-4 flex items-center gap-2">
                <span>📦</span> Order Summary
              </h3>
              <div className="space-y-3">
                <div className="flex justify-between py-2 border-b border-gray-100">
                  <span className="text-gray-600">Amount Paid:</span>
                  <span className="font-medium">{state.totalAmount}</span>
                </div>
                <div className="flex justify-between py-2 border-b border-gray-100">
                  <span className="text-gray-600">Session ID:</span>
                  <span className="font-mono text-sm">{state.sessionId}</span>
                </div>
                <div className="flex justify-between py-2 border-b border-gray-100">
                  <span className="text-gray-600">Bonus Offers Selected:</span>
                  <span>{state.offerCount} offers</span>
                </div>
                <div className="flex justify-between py-2">
                  <span className="text-gray-600">Date:</span>
                  <span>{new Date().toLocaleDateString()}</span>
                </div>
              </div>
            </div>

            {/* What's Next */}
            <div className="bg-white rounded-xl shadow-md p-6">
              <h3 className="text-xl font-semibold mb-4 flex items-center gap-2">
                <span>🎉</span> What's Next?
              </h3>
              <div className="space-y-4">
                <div className="flex items-start gap-3">
                  <div className="text-2xl">📧</div>
                  <div>
                    <h4 className="font-medium text-gray-900">Check Your Email</h4>
                    <p className="text-gray-600 text-sm">Order confirmation and account details are on their way</p>
                  </div>
                </div>
                <div className="flex items-start gap-3">
                  <div className="text-2xl">🚀</div>
                  <div>
                    <h4 className="font-medium text-gray-900">Access Your Account</h4>
                    <p className="text-gray-600 text-sm">Start using your new subscription immediately</p>
                  </div>
                </div>
                {state.offerCount > 0 && (
                  <div className="flex items-start gap-3">
                    <div className="text-2xl">🎁</div>
                    <div>
                      <h4 className="font-medium text-gray-900">Enjoy Your Bonus Offers</h4>
                      <p className="text-gray-600 text-sm">{state.offerCount} selected offers will be delivered to your inbox</p>
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>

          {/* Actions */}
          <div className="flex flex-wrap gap-4 justify-center mb-8">
            <button 
              onClick={() => navigate('/')} 
              className="px-6 py-3 rounded-lg bg-white border border-gray-300 text-gray-700 font-medium hover:bg-gray-50 transition-colors"
            >
              ← Back to Home
            </button>
            <button 
              onClick={() => navigate('/')} 
              className="px-6 py-3 rounded-lg bg-emerald-600 text-white font-medium hover:bg-emerald-700 transition-colors"
            >
              Start New Order
            </button>
          </div>

          {/* Support Information */}
          <div className="text-center text-gray-600 text-sm">
            <p>
              Need help? Contact our support team at{' '}
              <a href="mailto:support@example.com" className="text-emerald-600 hover:underline">support@example.com</a> or call{' '}
              <a href="tel:+1234567890" className="text-emerald-600 hover:underline">+1 (234) 567-890</a>
            </p>
          </div>
        </div>
      </div>
      
      {/* Technical Sidebar */}
      <EmbeddedSidebar 
        isOpen={showSidebar} 
        onToggle={() => setShowSidebar(!showSidebar)}
        title="Technical Integration"
        subtitle="Webhook & API details for developers"
        position="right"
      >
        <Tabs>
          <TabsList>
            <TabsTrigger 
              value="webhook" 
              activeTab={activeTab} 
              onTabChange={setActiveTab}
            >
              Webhook Payload
            </TabsTrigger>
            <TabsTrigger 
              value="wrap-api" 
              activeTab={activeTab} 
              onTabChange={setActiveTab}
            >
              Wrap API Request & Response
            </TabsTrigger>
          </TabsList>

          <TabsContent value="webhook" activeTab={activeTab}>
            <div className="p-4">
              <div className="mb-4 bg-gray-50 p-4 rounded-lg border border-gray-200">
                <h3 className="text-base font-semibold mb-2 text-gray-700">
                  Webhook Delivery Status
                </h3>
                <div className="flex items-center gap-2">
                  <div className={`w-3 h-3 rounded-full transition-colors ${state?.wrapSessionSuccess ? 'bg-green-500' : 'bg-red-500'}`}></div>
                  <span className={`text-sm ${state?.wrapSessionSuccess ? 'text-green-700' : 'text-red-700'}`}>
                    {state?.wrapSessionSuccess 
                      ? 'Successfully delivered to publisher endpoint' 
                      : 'Delivery pending or failed'}
                  </span>
                </div>
              </div>
              
              <h3 className="text-base font-semibold mb-2 text-gray-800">
                Webhook Payload Structure
              </h3>
              <p className="text-sm mb-4 text-gray-600">
                The following payload has been sent to your webhook endpoint after checkout completion:
              </p>
              
              <div className="relative mb-6">
                <div className="absolute top-2 right-2 z-10 flex gap-1">
                  <button 
                    onClick={() => {
                      navigator.clipboard.writeText(JSON.stringify(getWebhookPayloadExample(state), null, 2));
                    }}
                    className="bg-white/80 border border-gray-300 rounded px-2 py-1 text-xs cursor-pointer flex items-center gap-1 hover:bg-gray-50"
                  >
                    <svg width="12" height="12" viewBox="0 0 24 24" fill="none">
                      <path d="M8 5H6C4.89543 5 4 5.89543 4 7V19C4 20.1046 4.89543 21 6 21H16C17.1046 21 18 20.1046 18 19V17M8 5C8 6.10457 8.89543 7 10 7H14C15.1046 7 16 6.10457 16 5M8 5C8 3.89543 8.89543 3 10 3H14C15.1046 3 16 3.89543 16 5M16 5V7C16 8.10457 16.8954 9 18 9H20C21.1046 9 22 9.89543 22 11V17C22 18.1046 21.1046 19 20 19H18" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                    </svg>
                    Copy JSON
                  </button>
                </div>
                <pre className="bg-purple-50 border border-purple-200 rounded-lg p-4 text-xs overflow-auto max-h-[300px] text-gray-700 font-mono">
                  {JSON.stringify(getWebhookPayloadExample(state), null, 2)}
                </pre>
              </div>
              
              <h3 className="text-base font-semibold mb-2 text-gray-800">
                Field Descriptions
              </h3>
              <div className="border border-gray-200 rounded-lg overflow-hidden mb-4">
                <table className="w-full border-collapse text-xs">
                  <thead>
                    <tr className="bg-gray-50 border-b border-gray-200">
                      <th className="p-2 text-left text-gray-700 font-semibold">Field</th>
                      <th className="p-2 text-left text-gray-700 font-semibold">Description</th>
                    </tr>
                  </thead>
                  <tbody>
                    {getWebhookFieldDescriptions().map((field, index) => (
                      <tr key={index} className="border-b border-gray-200 hover:bg-gray-50">
                        <td className="p-2 font-mono text-purple-700">
                          {field.name}
                        </td>
                        <td className="p-2 text-gray-700">
                          {field.description}
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          </TabsContent>

          <TabsContent value="wrap-api" activeTab={activeTab}>
            <div className="p-4">
              <h3 className="text-base font-semibold mb-2 text-gray-800">
                Wrap Session API
              </h3>
              <p className="text-sm mb-4 text-gray-600">
                The wrap session API is called at the end of the purchase process to finalize the user's selected offers and trigger a webhook to your endpoint.
              </p>
              
              {state?.wrapSessionRequest ? (
                <>
                  <div className="mb-4">
                    <h4 className="text-sm font-medium mb-2 text-gray-700">API Request</h4>
                    <details className="cursor-pointer">
                      <summary className="font-medium flex items-center gap-2 text-sm text-blue-600 hover:text-blue-800">
                        <span>➤</span> 
                        <span>cURL Request</span>
                        <span className="text-xs font-normal text-gray-500 bg-gray-200 px-2 py-0.5 rounded-full">
                          POST
                        </span>
                      </summary>
                      <div className="mt-2 rounded-md overflow-hidden">
                        <div className="bg-gray-800 text-gray-200 p-2 text-xs font-mono flex justify-between items-center rounded-t-md">
                          <span>cURL Command</span>
                          <button 
                            onClick={() => {
                              if (state?.wrapSessionRequest?.curl) {
                                navigator.clipboard.writeText(state.wrapSessionRequest.curl);
                              }
                            }}
                            className="bg-transparent border-none text-gray-400 cursor-pointer px-2 py-1 text-xs flex items-center gap-1 hover:text-white"
                          >
                            <svg width="12" height="12" viewBox="0 0 24 24" fill="none">
                              <path d="M8 5H6C4.89543 5 4 5.89543 4 7V19C4 20.1046 4.89543 21 6 21H16C17.1046 21 18 20.1046 18 19V17M8 5C8 6.10457 8.89543 7 10 7H14C15.1046 7 16 6.10457 16 5M8 5C8 3.89543 8.89543 3 10 3H14C15.1046 3 16 3.89543 16 5M16 5V7C16 8.10457 16.8954 9 18 9H20C21.1046 9 22 9.89543 22 11V17C22 18.1046 21.1046 19 20 19H18" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                            </svg>
                            Copy
                          </button>
                        </div>
                        <pre className="m-0 bg-gray-900 p-3 text-xs text-gray-200 overflow-auto font-mono max-h-[200px] rounded-b-md">
                          {state?.wrapSessionRequest?.curl}
                        </pre>
                      </div>
                      
                      <div className="mt-3">
                        <div className="text-xs font-medium text-gray-600 mb-1">
                          Request Body
                        </div>
                        <pre className="m-0 bg-gray-50 p-3 rounded text-xs overflow-auto font-mono max-h-[150px] text-gray-800 border border-gray-200">
                          {state?.wrapSessionRequest?.body && JSON.stringify(state?.wrapSessionRequest?.body, null, 2)}
                        </pre>
                      </div>
                    </details>
                  </div>

                  <div className="mb-4">
                    <h4 className="text-sm font-medium mb-2 text-gray-700">API Response</h4>
                    <details className="cursor-pointer">
                      <summary className="font-medium flex items-center gap-2 text-sm text-green-600 hover:text-green-800">
                        <span>←</span> 
                        <span>Response</span>
                        <span className="text-xs font-normal text-white bg-green-500 px-2 py-0.5 rounded-full">
                          200
                        </span>
                      </summary>
                      <div className="mt-2">
                        <pre className="m-0 bg-green-50 border border-green-100 p-3 rounded text-xs overflow-auto font-mono max-h-[200px] text-gray-800">
                          {state?.wrapSessionResponse && JSON.stringify(state?.wrapSessionResponse, null, 2)}
                        </pre>
                      </div>
                      
                      <button 
                        onClick={() => {
                          if (state?.wrapSessionResponse) {
                            navigator.clipboard.writeText(JSON.stringify(state.wrapSessionResponse, null, 2));
                          }
                        }}
                        className="mt-2 bg-gray-50 border border-gray-200 text-gray-500 px-2 py-1 text-xs flex items-center gap-1 rounded ml-auto hover:bg-gray-100"
                      >
                        <svg width="12" height="12" viewBox="0 0 24 24" fill="none">
                          <path d="M8 5H6C4.89543 5 4 5.89543 4 7V19C4 20.1046 4.89543 21 6 21H16C17.1046 21 18 20.1046 18 19V17M8 5C8 6.10457 8.89543 7 10 7H14C15.1046 7 16 6.10457 16 5M8 5C8 3.89543 8.89543 3 10 3H14C15.1046 3 16 3.89543 16 5M16 5V7C16 8.10457 16.8954 9 18 9H20C21.1046 9 22 9.89543 22 11V17C22 18.1046 21.1046 19 20 19H18" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round"/>
                        </svg>
                        Copy Response
                      </button>
                    </details>
                  </div>

                  <div className="bg-blue-50 border-l-4 border-blue-400 p-3 rounded text-sm text-blue-800 mt-4">
                    <p className="font-medium">Integration Note</p>
                    <p className="mt-1 text-xs">
                      The wrap session API call triggers the webhook delivery to your registered endpoint. This happens asynchronously, so you may need to implement retry logic if the webhook delivery fails.
                    </p>
                  </div>
                </>
              ) : (
                <div className="bg-gray-50 border border-gray-200 rounded-lg p-4 text-gray-600 text-center">
                  <p>No wrap session API data available.</p>
                  <p className="text-sm mt-2">This might be due to an error in the API call or because you're in demo mode.</p>
                </div>
              )}
            </div>
          </TabsContent>
        </Tabs>
      </EmbeddedSidebar>
    </div>
  );
};

export default ThankYouPage;
